{
  "version": "2.0",
  "service": "<p>This is the AWS Discovery Service API Reference. The AWS Discovery Service streamlines the process of migrating to Amazon Web Services by helping you identify assets in your data center, including servers, virtual machines, applications, application dependencies, and network infrastructure. You can use this information to find the workloads that make up an application, analyze dependencies, and build migration strategies. The service also collects performance data about your workloads which you can use to assess migration outcomes.</p> <p>This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Discovery Service. The topic for each action shows the API request parameters and the response. Alternatively, you can use one of the AWS SDKs to access an API that's tailored to the programming language or platform that you're using. For more information, see <a href=\"http://aws.amazon.com/tools/#SDKs\">AWS SDKs</a>.</p> <p>This guide is intended for use with the <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/remote-commands-prereq.html\">AWS Discovery Service user guide</a>.</p> <p>The following are short descriptions of each API action, organized by function.</p> <p> <b>Managing AWS Agents</b> </p> <p>The AWS agent is an Amazon application that you install on servers and virtual machines in your data center or on Amazon EC2 instances. The agent captures server configuration and activity information (including hardware profile, network, file system, and process activity) and sends this data to the AWS Application Discovery Service. The Discovery Service processes this data and maps the application dependencies for your workloads.</p> <ul> <li> <p> <i>StartDataCollectionByAgentIds</i>: Instructs the specified agents to start collecting data. Agents can reside on host servers or virtual machines in your data center or on AWS EC2 instances.</p> </li> <li> <p> <i>StopDataCollectionByAgentIds</i>: Instructs the specified agents to stop collecting data.</p> </li> <li> <p> <i>DescribeAgents</i>: Lists AWS agents by ID or lists all agents associated with your user account if you did not specify an agent ID. The output includes agent IDs, IP addresses, MAC addresses, agent health, host name where the agent resides, and the version number of each agent.</p> </li> </ul> <p> <b>Querying Configuration Items</b> </p> <p>A <i>configuration item</i> is an IT asset that was discovered in your data center by an AWS agent. With the Discovery Service, you can specify filters and query specific configuration items. For example, using this API, you could create a filter to query for a process configuration item named apache and an operating system configuration item named Ubuntu.</p> <ul> <li> <p> <i>GetConfigurationAttributes</i>: Retrieves a list of attributes for a specific configuration ID. For example, the output for a <i>server</i> configuration item includes a list of attributes about the server, including host name, operating system, number of network cards, etc.</p> </li> <li> <p> <i>ListConfigurations</i>: Retrieves a list of configurations items according to the criteria you specify in a filter. The filter criteria identify relationship requirements. For example, the following filter specifies criteria of process.name and values of <i>nginx</i> and <i>apache</i>.</p> <p> <code>ConfigurationType = Process Filters = [WebServerCriteria] WebServerCriteria = { ‘key’ : process.name, ‘values’ : [ ‘nginx’, ‘apache’ ], ‘condition’ : ‘contains’ } </code> </p> </li> </ul> <p> <b>Tagging Discovered Configuration Items</b> </p> <p>You can tag discovered configuration items. Tags are metadata that help you categorize IT assets in your data center. Tags use a <i>key</i>,<i>value</i> format. For example, <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code>. </p> <ul> <li> <p> <i>CreateTags</i>: Creates one or more tags for a configuration item. Tags are metadata that help you categorize IT assets.</p> </li> <li> <p> <i>DescribeTags</i>: Retrieve a list of configuration items that are tagged with a specific tag. Or retrieve a list all tags assigned to a specific configuration item.</p> </li> <li> <p> <i>DeleteTags</i>: Deletes one or more tags associated with a configuration item.</p> </li> </ul> <p> <b>Exporting Data</b> </p> <p>You can export discovered data to an Amazon S3 bucket in the form of CSV files.</p> <ul> <li> <p> <i>ExportConfigurations</i>: Exports all discovered configuration data to an Amazon S3 bucket. Data includes processes, connections, servers, and system performance.</p> </li> <li> <p> <i>GetExportStatus</i>: Gets the status of the data export. When the export is complete, the service returns an Amazon S3 URL where you can download CSV files that include the data.</p> </li> </ul>",
  "operations": {
    "CreateTags": "<p>Creates one or more tags for a configuration item. Tags are metadata that help you categorize IT assets.</p>",
    "DeleteTags": "<p>Deletes one or more tags associated with a configuration item.</p>",
    "DescribeAgents": "<p>Lists AWS agents by ID or lists all agents associated with your user account if you did not specify an agent ID.</p>",
    "DescribeTags": "<p>Retrieve a list of configuration items that are tagged with a specific tag. Or retrieve a list all tags assigned to a specific configuration item.</p>",
    "ExportConfigurations": "<p>Exports the selected configurations to an Amazon S3 bucket.</p>",
    "GetConfigurationAttributes": "<p>Retrieve a list of attributes for a specific configuration ID. For example, the output for a <i>server</i> configuration item includes a list of attributes about the server, including host name, operating system, number of network cards, etc.</p>",
    "GetExportStatus": "<p>Retrieves the status of a given export process.</p>",
    "ListConfigurations": "<p>Retrieve a list of configurations items according to the criteria you specify in a filter. The filter criteria identify relationship requirements.</p>",
    "RemoveConfiguration": null,
    "StartDataCollectionByAgentIds": "<p>Instructs the specified agents to start collecting data. Agents can reside on host servers or virtual machines in your data center or on AWS EC2 instances.</p>",
    "StopDataCollectionByAgentIds": "<p>Instructs the specified agents to stop collecting data.</p>"
  },
  "shapes": {
    "AgentConfigStatus": {
      "base": "<p>Information about agents that were instructed to start collecting data. Information includes the agent ID, a description of the operation, and whether or not the agent configuration was updated.</p>",
      "refs": {
        "AgentConfigStatusList$member": null
      }
    },
    "AgentConfigStatusList": {
      "base": null,
      "refs": {
        "StartDataCollectionByAgentIdsResponse$agentsConfigStatus": "<p>Information about agents that were instructed to start collecting data. Information includes the agent ID, a description of the operation performed, and whether or not the agent configuration was updated.</p>",
        "StopDataCollectionByAgentIdsResponse$agentsConfigStatus": "<p>Information about agents that were instructed to stop collecting data. Information includes the agent ID, a description of the operation performed, and whether or not the agent configuration was updated.</p>"
      }
    },
    "AgentId": {
      "base": null,
      "refs": {
        "AgentIds$member": null,
        "AgentInfo$agentId": "<p>The agent ID.</p>"
      }
    },
    "AgentIds": {
      "base": null,
      "refs": {
        "DescribeAgentsRequest$agentIds": "<p>The agent IDs for which you want information. If you specify no IDs, the system returns information about all agents associated with your AWS user account.</p>",
        "StartDataCollectionByAgentIdsRequest$agentIds": "<p>The IDs of the agents that you want to start collecting data.</p>",
        "StopDataCollectionByAgentIdsRequest$agentIds": "<p>The IDs of the agents that you want to stop collecting data.</p>"
      }
    },
    "AgentInfo": {
      "base": "<p>Information about agents associated with the user’s AWS account. Information includes agent IDs, IP addresses, MAC addresses, agent health, hostname where the agent resides, and agent version for each agent.</p>",
      "refs": {
        "AgentsInfo$member": null
      }
    },
    "AgentNetworkInfo": {
      "base": "<p>Network details about the host where the agent resides.</p>",
      "refs": {
        "AgentNetworkInfoList$member": null
      }
    },
    "AgentNetworkInfoList": {
      "base": null,
      "refs": {
        "AgentInfo$agentNetworkInfoList": "<p>Network details about the host where the agent resides.</p>"
      }
    },
    "AgentStatus": {
      "base": null,
      "refs": {
        "AgentInfo$health": "<p>The health of the agent.</p>"
      }
    },
    "AgentsInfo": {
      "base": null,
      "refs": {
        "DescribeAgentsResponse$agentsInfo": "<p>Lists AWS agents by ID or lists all agents associated with your user account if you did not specify an agent ID. The output includes agent IDs, IP addresses, MAC addresses, agent health, host name where the agent resides, and the version number of each agent.</p>"
      }
    },
    "Attribute": {
      "base": "<p>A specific detail about a configuration item. For example, the output for a <i>server</i> configuration item includes a list of attributes about the server, including host name, operating system, number of network cards, etc.</p>",
      "refs": {
        "AttributeList$member": null
      }
    },
    "AttributeList": {
      "base": null,
      "refs": {
        "ConfigIdAttributesMap$value": null
      }
    },
    "AttributeName": {
      "base": null,
      "refs": {
        "Attribute$Name": "<p>The name of the attribute.</p>"
      }
    },
    "AttributeValue": {
      "base": null,
      "refs": {
        "Attribute$Value": "<p>A specific attribute type. For example key = serverType and value = web server.</p>"
      }
    },
    "AuthorizationErrorException": {
      "base": "<p>The AWS user account does not have permission to perform the action. Check the IAM policy associated with this account.</p>",
      "refs": {
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "AgentConfigStatus$configUpdated": "<p>Information about whether or not the agent configuration was updated.</p>"
      }
    },
    "Condition": {
      "base": null,
      "refs": {
        "Filter$condition": "<p>A conditional operator for the filter.</p>"
      }
    },
    "ConfigIdAttributesMap": {
      "base": null,
      "refs": {
        "GetConfigurationAttributesResponse$configurations": "<p>Returns configuration details, including the configuration ID, attribute names, and attribute values.</p>"
      }
    },
    "Configuration": {
      "base": null,
      "refs": {
        "Configurations$member": null
      }
    },
    "ConfigurationExportId": {
      "base": null,
      "refs": {
        "ExportConfigurationsResponse$exportId": "<p>A unique identifier which you can use to query the export status.</p>",
        "GetExportStatusRequest$exportId": "<p>A unique identifier which you can use to query the export status.</p>",
        "GetExportStatusResponse$exportId": "<p>Returns configuration details, including the configuration ID, attribute names, and attribute values.</p>"
      }
    },
    "ConfigurationId": {
      "base": null,
      "refs": {
        "ConfigIdAttributesMap$key": null,
        "ConfigurationIdList$member": null,
        "ConfigurationTag$configurationId": "<p>The configuration ID for the item you want to tag. You can specify a list of keys and values.</p>",
        "RemoveConfigurationRequest$configurationId": null
      }
    },
    "ConfigurationIdList": {
      "base": null,
      "refs": {
        "CreateTagsRequest$configurationIds": "<p>A list of configuration items that you want to tag.</p>",
        "DeleteTagsRequest$configurationIds": "<p>A list of configuration items with tags that you want to delete.</p>",
        "GetConfigurationAttributesRequest$configurationIds": "<p>One or more configuration IDs.</p>"
      }
    },
    "ConfigurationItemType": {
      "base": null,
      "refs": {
        "ConfigurationTag$configurationType": "<p>A descriptor. For example, <i>serverType</i>.</p>",
        "ListConfigurationsRequest$configurationType": "<p>A valid configuration identified by the Discovery Service. </p>"
      }
    },
    "ConfigurationTag": {
      "base": "<p>Tags for a configuration item. Tags are metadata that help you categorize IT assets.</p>",
      "refs": {
        "ConfigurationTagSet$member": null
      }
    },
    "ConfigurationTagSet": {
      "base": null,
      "refs": {
        "DescribeTagsResponse$tags": "<p>Depending on the input, a list of configuration items tagged with a specific tag, or a list of tags for a specific configuration item.</p>"
      }
    },
    "Configurations": {
      "base": null,
      "refs": {
        "ListConfigurationsResponse$configurations": "<p>Returns a list of configuration item IDs.</p>"
      }
    },
    "CreateTagsRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateTagsResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteTagsRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteTagsResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeAgentsRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeAgentsResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeTagsRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeTagsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ExportConfigurationsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ExportStatusMap": {
      "base": null,
      "refs": {
        "GetExportStatusResponse$exportStatusMap": "<p>Returns export details. When the status is complete, the response includes a URL for an Amazon S3 bucket where you can view the data in a CSV file.</p>"
      }
    },
    "Filter": {
      "base": "<p>A means of limiting responses.</p>",
      "refs": {
        "Filters$member": null
      }
    },
    "FilterName": {
      "base": null,
      "refs": {
        "TagFilter$Name": "<p>A name of a tag filter.</p>"
      }
    },
    "FilterValue": {
      "base": null,
      "refs": {
        "FilterValues$member": null
      }
    },
    "FilterValues": {
      "base": null,
      "refs": {
        "Filter$values": "<p>The value you want to filter on.</p>",
        "TagFilter$Values": "<p>Values of a tag filter.</p>"
      }
    },
    "Filters": {
      "base": null,
      "refs": {
        "ListConfigurationsRequest$filters": "<p>You can filter the list using a key, value format. For example:</p> <p> <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code> </p>"
      }
    },
    "GetConfigurationAttributesRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetConfigurationAttributesResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetExportStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetExportStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "DescribeAgentsRequest$maxResults": "<p>The total number of items to return. The maximum value is 100.</p>",
        "DescribeTagsRequest$maxResults": "<p>The total number of items to return. The maximum value is 100.</p>",
        "ListConfigurationsRequest$maxResults": "<p>The total number of items to return. The maximum value is 100.</p>"
      }
    },
    "InvalidParameterException": {
      "base": "<p>One or more parameters are not valid. Verify the parameters and try again.</p>",
      "refs": {
      }
    },
    "InvalidParameterValueException": {
      "base": "<p>The value of one or more parameters are either invalid or out of range. Verify the parameter values and try again.</p>",
      "refs": {
      }
    },
    "ListConfigurationsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListConfigurationsResponse": {
      "base": null,
      "refs": {
      }
    },
    "Message": {
      "base": null,
      "refs": {
        "AuthorizationErrorException$message": null,
        "InvalidParameterException$message": null,
        "InvalidParameterValueException$message": null,
        "OperationNotPermittedException$message": null,
        "ResourceNotFoundException$message": null,
        "ServerInternalErrorException$message": null
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "DescribeAgentsRequest$nextToken": "<p>A token to start the list. Use this token to get the next set of results.</p>",
        "DescribeAgentsResponse$nextToken": "<p>The call returns a token. Use this token to get the next set of results.</p>",
        "DescribeTagsRequest$nextToken": "<p>A token to start the list. Use this token to get the next set of results.</p>",
        "DescribeTagsResponse$nextToken": "<p>The call returns a token. Use this token to get the next set of results.</p>",
        "ListConfigurationsRequest$nextToken": "<p>A token to start the list. Use this token to get the next set of results.</p>",
        "ListConfigurationsResponse$nextToken": "<p>The call returns a token. Use this token to get the next set of results.</p>"
      }
    },
    "OperationNotPermittedException": {
      "base": "<p>This operation is not permitted.</p>",
      "refs": {
      }
    },
    "RemoveConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "RemoveConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The specified configuration ID was not located. Verify the configuration ID and try again.</p>",
      "refs": {
      }
    },
    "ServerInternalErrorException": {
      "base": "<p>The server experienced an internal error. </p>",
      "refs": {
      }
    },
    "StartDataCollectionByAgentIdsRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartDataCollectionByAgentIdsResponse": {
      "base": null,
      "refs": {
      }
    },
    "StopDataCollectionByAgentIdsRequest": {
      "base": null,
      "refs": {
      }
    },
    "StopDataCollectionByAgentIdsResponse": {
      "base": null,
      "refs": {
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AgentConfigStatus$agentId": "<p>The agent ID.</p>",
        "AgentConfigStatus$description": "<p>A description of the operation performed.</p>",
        "AgentInfo$hostName": "<p>The name of the host where the agent resides. The host can be a server, virtual machine, or an AWS EC2 instance.</p>",
        "AgentInfo$connectorId": "<p></p>",
        "AgentInfo$version": "<p>The agent version</p>",
        "AgentNetworkInfo$ipAddress": "<p>The IP address for the host where the agent resides.</p>",
        "AgentNetworkInfo$macAddress": "<p>The MAC address for the host where the agent resides.</p>",
        "Configuration$key": null,
        "Configuration$value": null,
        "ExportStatusMap$key": null,
        "ExportStatusMap$value": null,
        "Filter$name": "<p>The name of the filter you want to use.</p>"
      }
    },
    "Tag": {
      "base": "<p>Metadata that help you categorize IT assets.</p>",
      "refs": {
        "TagSet$member": null
      }
    },
    "TagFilter": {
      "base": "<p>A means of limiting responses when searching for tags.</p>",
      "refs": {
        "TagFilters$member": null
      }
    },
    "TagFilters": {
      "base": null,
      "refs": {
        "DescribeTagsRequest$filter": "<p>You can filter the list using a key, value format. For example:</p> <p> <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code> </p> <p>You can separate these items by using logical operators. Allowed filters include tagkey, tagValue, and configid. </p>"
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "ConfigurationTag$key": "<p>A type of tag to filter on. For example <i>serverType</i>.</p>",
        "Tag$key": "<p>A type of tag to filter on.</p>"
      }
    },
    "TagSet": {
      "base": null,
      "refs": {
        "CreateTagsRequest$tags": "<p>Tags that you want to associate with one or more configuration items. Specify the tags that you want to create in a <i>key</i>,<i>value</i> format. For example:</p> <p> <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code> </p>",
        "DeleteTagsRequest$tags": "<p>Tags that you want to delete from one or more configuration items. Specify the tags that you want to delete in a <i>key</i>, <i>value</i> format. For example:</p> <p> <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code> </p>"
      }
    },
    "TagValue": {
      "base": null,
      "refs": {
        "ConfigurationTag$value": "<p>A value to filter on. For example <i>key = serverType</i> and <i>value = web server</i>.</p>",
        "Tag$value": "<p>A value for a tag key to filter on.</p>"
      }
    }
  }
}
